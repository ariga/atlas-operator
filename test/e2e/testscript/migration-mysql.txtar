env DB_URL=mysql://root:pass@mysql.${NAMESPACE}:3306/myapp
kubectl apply -f database.yaml
kubectl create secret generic db-creds --from-literal=url=${DB_URL}

# Wait for the first pod created
kubectl-wait-available deploy/mysql
# Wait for the DB ready before creating the schema
kubectl-wait-ready -l app=mysql pods

# Create configmap to store the migrations directory
kubectl create configmap migration-dir --from-file=migrations-v1

# Create the resource
kubectl apply -f migration.yaml
kubectl-wait-ready AtlasMigration/mysql

# Inspect the schema to ensure it's correct
atlas schema inspect -u ${DB_URL} --exclude=atlas_schema_revisions
cmp stdout schema-v1.hcl

# Update the configmap with the new migrations
kubectl create configmap migration-dir --from-file=migrations-v2 --dry-run=client -o yaml
stdin stdout
kubectl apply -f -
# Ensure the controller is aware of the change
kubectl wait --for=condition=ready=false --timeout=500s AtlasMigration/mysql
kubectl-wait-ready AtlasMigration/mysql

# Inspect the schema to ensure it's correct
atlas schema inspect -u ${DB_URL} --exclude=atlas_schema_revisions
cmp stdout schema-v2.hcl

# Update the configmap with v1 migrations, it will trigger migrate down
kubectl create configmap migration-dir --from-file=migrations-v1 --dry-run=client -o yaml
stdin stdout
kubectl apply -f -
# Expect migration is failured
kubectl wait --timeout=500s --for=jsonpath='{.status.conditions[*].message}'='"migrate down is not allowed, set `migrateDown.allow` to true to allow downgrade"' AtlasMigration/mysql
# Patch the migration to allow down migration
kubectl patch AtlasMigration/mysql --type merge --patch-file ./migration-patch-down.yaml
kubectl wait --timeout=500s --for=condition=ready AtlasMigration/mysql

# Inspect the schema to ensure it's correct after down migration
atlas schema inspect -u ${DB_URL} --exclude=atlas_schema_revisions
cmp stdout schema-v1.hcl
-- schema-v1.hcl --
table "posts" {
  schema = schema.myapp
  column "id" {
    null = false
    type = int
  }
  column "user_id" {
    null = false
    type = int
  }
  column "title" {
    null = false
    type = varchar(255)
  }
  column "body" {
    null = false
    type = text
  }
  primary_key {
    columns = [column.id]
  }
  foreign_key "posts_ibfk_1" {
    columns     = [column.user_id]
    ref_columns = [table.users.column.id]
    on_update   = NO_ACTION
    on_delete   = CASCADE
  }
  index "user_id" {
    columns = [column.user_id]
  }
}
table "users" {
  schema = schema.myapp
  column "id" {
    null = false
    type = int
  }
  column "user_name" {
    null = false
    type = varchar(255)
  }
  column "email" {
    null = false
    type = varchar(255)
  }
  primary_key {
    columns = [column.id]
  }
}
schema "myapp" {
  charset = "utf8mb4"
  collate = "utf8mb4_0900_ai_ci"
}
-- schema-v2.hcl --
table "posts" {
  schema = schema.myapp
  column "id" {
    null = false
    type = int
  }
  column "user_id" {
    null = false
    type = int
  }
  column "title" {
    null = false
    type = varchar(255)
  }
  column "body" {
    null = false
    type = text
  }
  column "created_at" {
    null    = false
    type    = datetime
    default = sql("CURRENT_TIMESTAMP")
  }
  primary_key {
    columns = [column.id]
  }
  foreign_key "posts_ibfk_1" {
    columns     = [column.user_id]
    ref_columns = [table.users.column.id]
    on_update   = NO_ACTION
    on_delete   = CASCADE
  }
  index "user_id" {
    columns = [column.user_id]
  }
}
table "users" {
  schema = schema.myapp
  column "id" {
    null = false
    type = int
  }
  column "user_name" {
    null = false
    type = varchar(255)
  }
  column "email" {
    null = false
    type = varchar(255)
  }
  primary_key {
    columns = [column.id]
  }
}
schema "myapp" {
  charset = "utf8mb4"
  collate = "utf8mb4_0900_ai_ci"
}
-- migrations-v1/atlas.sum --
h1:XBXbh+rzLis8gknjlIqnxXLBkOZ+sN2v2p7KjyVFYYM=
20230316085611.sql h1:br6W6LPEnnsejlz/7hRm9zthwStCzjN2vZkqVPxlmvo=
20230316090502.sql h1:GfeRjkSeoCt3JVRtLQNa/r50lRfpAPXS7AqTU2ZNFgY=
-- migrations-v1/20230316085611.sql --
-- Create "users" table
CREATE TABLE `users` (
  `id` int NOT NULL,
  `user_name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) CHARSET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
-- migrations-v1/20230316090502.sql --
-- Create "posts" table
CREATE TABLE `posts` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `user_id` (`user_id`),
  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE NO ACTION ON DELETE CASCADE
) CHARSET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
-- migrations-v2/atlas.sum --
h1:clhmXbPkM1agi3QjNRsUkfHXCQxdtNT1x70QI5x7nns=
20230316085611.sql h1:br6W6LPEnnsejlz/7hRm9zthwStCzjN2vZkqVPxlmvo=
20230316090502.sql h1:GfeRjkSeoCt3JVRtLQNa/r50lRfpAPXS7AqTU2ZNFgY=
20241013090259.sql h1:0049ULgDeVTr2RSapOCwICgpUGLP6QgRfanqVSuRxd8=
-- migrations-v2/20230316085611.sql --
-- Create "users" table
CREATE TABLE `users` (
  `id` int NOT NULL,
  `user_name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) CHARSET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
-- migrations-v2/20230316090502.sql --
-- Create "posts" table
CREATE TABLE `posts` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `user_id` (`user_id`),
  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE NO ACTION ON DELETE CASCADE
) CHARSET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
-- migrations-v2/20241013090259.sql --
ALTER TABLE posts ADD COLUMN created_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP;
-- migration.yaml --
apiVersion: db.atlasgo.io/v1alpha1
kind: AtlasMigration
metadata:
  name: mysql
spec:
  dir:
    configMapRef:
      name: "migration-dir"
  urlFrom:
    secretKeyRef:
      name: db-creds
      key: url
-- migration-patch-down.yaml --
apiVersion: db.atlasgo.io/v1alpha1
kind: AtlasMigration
spec:
  protectedFlows:
    migrateDown:
      allow: true
      autoApprove: true
-- database.yaml --
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: pass
            - name: MYSQL_DATABASE
              value: myapp
          ports:
            - containerPort: 3306
              name: mysql
          readinessProbe:
            tcpSocket:
              port: 3306
            periodSeconds: 5
          startupProbe:
            exec:
              command: [ "mysql", "-ppass", "-h", "127.0.0.1", "-e", "SELECT 1" ]
            failureThreshold: 30
            periodSeconds: 10
