# Default values for atlas-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: arigaio/atlas-operator
  pullPolicy: IfNotPresent
  tag: ""

rbac:
  create: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  labels: {}
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  runAsNonRoot: true

securityContext:
  runAsUser: 1000
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

# By default, the operator will recreate devdb pods after migration
# Set this to true to keep the devdb pods around.
prewarmDevDB: true

# -- Additional environment variables to set
extraEnvs: []
# extraEnvs:
#   - name: FOO
#     valueFrom:
#       secretKeyRef:
#         key: FOO
#         name: secret-resource
#   - name: BAR
#     valueFrom:
#      configMapKeyRef:
#        key: BAR
#        name: config-map-resource

extraVolumes: []
# extraVolumes:
#   - name: extra-volume
#     secret:
#       secretName: extra-volume-secret

extraVolumeMounts: []
# extraVolumeMounts:
#   - name: extra-volume
#     mountPath: /extra-volume
#     readOnly: true

# -- PodMonitor defines monitoring for a set of pods.
# ref. https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.PodMonitor
podMonitor:
  enabled: false
  # Namespace in which to deploy the PodMonitor. Defaults to the release namespace.
  namespace: ""
  # Additional labels to be defined on a PodMonitor object, e.g. setting a label to match podMonitorSelector if one is used in Prometheus
  labels: {}
    # release: kube-prometheus-stack
  # PodTargetLabels defines the labels which are transferred from the associated Kubernetes Pod object.
  podTargetLabels: []
  # The label to use to retrieve the job name from. Defaults to app.kubernetes.io/name.
  jobLabel: ""

  # HTTP scheme to use for scraping.
  scheme: "http"
  # HTTP path from which to scrape for metrics.
  path: "/metrics"
  # Secret to mount to read bearer token for scraping targets.
  bearerTokenSecret: {}
  # TLS configuration to use when scraping the target.
  tlsConfig: {}
  # Interval at which Prometheus scrapes the metrics from the target.
  interval: ""
  # Timeout after which Prometheus considers the scrape to be failed.
  scrapeTimeout: ""
  # When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
  honorLabels: true

  # relabelings configures the relabeling rules to apply the target’s metadata labels
  relabelings: []
  # metricRelabelings configures the relabeling rules to apply to the samples before ingestion.
  metricRelabelings: []
